function ResultSMC = EstimationSMCsmoothGen(Data, Model, Parameters)

CheckParametersGen(Parameters)
NbResampling = Parameters.NbParticules;


ind = 1;
Pars = [];
Names = Parameters.Names.Estimated;
for i = 1:length(Names);
    Parameters.(Names{i}).Ind = ind;
    Pars(ind) = Parameters.(Names{i}).TransfValue;
    ind = ind+1;
end
NbParsEst = ind - 1;
    
NbVarsTot = Parameters.NbVariables;
Observations = Data.Observations;
ObservationInstants = Data.Instants;
ObservedVariables = Parameters.ObservedVariables;
NbComputingSteps = Data.NbComputingSteps;


Variables = ones(NbResampling,NbVarsTot);
InitialState = Parameters.InitialState;
PreviousState = InitialState;
PosteriorMeansRecord = diag(InitialState)*ones(NbVarsTot,length(ObservationInstants));
NbKeptSamples = NbResampling*ones(1,length(ObservationInstants));
ProportionKept = [];

ResampledParticules = zeros(length(ObservationInstants),NbVarsTot,NbResampling);
Particules =  zeros(length(ObservationInstants),NbVarsTot,NbResampling);

for IndTime = 1:length(ObservationInstants)
    Particules(IndTime,:,:) = diag(PreviousState)*ones(length(PreviousState),NbResampling);
end

if not(Parameters.NoPaths)
    CompletePaths= zeros(NbResampling,NbVarsTot,sum(Data.NbComputingSteps));
end
    
for IndResampling = 1:NbResampling
    Variables(IndResampling,:)=PreviousState;
    if not(Parameters.NoPaths)
        CompletePaths(IndResampling,:,1) = PreviousState;
    end
end
CumWeigths=(1:NbResampling)/NbResampling;


Liks = ones(1,length(ObservationInstants));
LogLik = 0;
FathersTab = zeros(NbResampling,length(ObservationInstants)-1);

Paths = zeros(NbResampling,NbVarsTot,sum(Data.NbComputingSteps));
for IndTime = 2:length(ObservationInstants)
    
    RandU1 = rand(1,1)/NbResampling;
    KeptSamples = zeros(1,NbResampling);
    
    Current = 1;
    for IndResampling = 1:NbResampling
        while CumWeigths(Current)<=RandU1+(IndResampling-1)/NbResampling
            Current = Current+1;
        end
        KeptSamples(IndResampling) = Current;
    end

    
    Variables = Variables(KeptSamples,:);
    
    
    FathersTab(:,IndTime-1) = KeptSamples;
       
  

    Res = Model.SMC_projection(Variables,IndTime,NbComputingSteps(IndTime),Data,Parameters,Paths);
    Variables = Res.Variables;
    Paths = Res.Paths;
    Weigths = Model.Lik(Variables,Observations(IndTime),Parameters);
   
    Liks(IndTime) = (mean(Weigths));
    LogLik = LogLik + log(mean(Weigths));
         
    Weigths = Weigths/sum(Weigths);
    Particules(IndTime,:,:) = Variables';
    
    CumWeigths=cumsum(Weigths)/sum(Weigths);
    ProportionKept(IndTime) = length(unique(KeptSamples))/length(KeptSamples);
end


FathersTab(:,end+1) = KeptSamples;

FathersTab2 = FathersTab;
if not(Parameters.NoPaths)
    RebuiltPaths = zeros(size(Paths));
end
test = [];
for i = size(FathersTab,2):-1:2
    if not(Parameters.NoPaths)
        RebuiltPaths(:,:,sum(Data.NbComputingSteps(i-1)) + 1: sum(Data.NbComputingSteps(i))) = Paths(FathersTab2(:,i),:,sum(Data.NbComputingSteps(i-1)) + 1: sum(Data.NbComputingSteps(i)));
    end
    ResampledParticules(i,:,:) = Particules(i,:,FathersTab2(:,i));
    FathersTab2(:,i-1) = FathersTab2(FathersTab2(:,i),i-1);
%     test(i) = sum(sum(RebuiltLambdas(:,(i-2)*NbTSteps + 1: (i-1)*NbTSteps) == CompleteLambdas(:,(i-2)*NbTSteps + 1: (i-1)*NbTSteps)));
end
ResampledParticules(1,:,:) = Particules(1,:,FathersTab2(:,1));

for IndTime = 1:length(ObservationInstants)
    for ivar =1:4
        q = quantile(ResampledParticules(IndTime,ivar,:),[0.025,0.975]);
        Posterior975Record(ivar,IndTime) = q(1);
        Posterior225Record(ivar,IndTime) = q(2);
        PosteriorMeansRecord(ivar,IndTime) = mean(ResampledParticules(IndTime,ivar,:));
    end
    NbKeptSamples(IndTime) = length(unique(ResampledParticules(IndTime,1,:)));
end



if strcmp(Parameters.MCMCType, 'Lang')
    if strcmp(Parameters.GMeth, 'PseudoCst')
        NbParsEst = length(Parameters.Pars);
        Grad = ComputeFirstDerivative(Parameters);
        G = -ComputeSecondDerivative(Parameters);
    end
    if strcmp(Parameters.GradMeth,'Kalman')
        ResGrad = KalmanNumericDerivativesGen(Data,Parameters);
        Grad = ResGrad.Grad;
        if not(isreal(Grad))
            disp('Problem: complex value')
        end
    end
end


ResultSMC.PosteriorMeansRecord = PosteriorMeansRecord;
ResultSMC.NbKeptSamples = NbKeptSamples;
ResultSMC.NbParticules = NbResampling;
ResultSMC.Data = Data;
ResultSMC.Parameters = Parameters;
ResultSMC.Posterior975Record = Posterior975Record;
ResultSMC.Posterior225Record = Posterior225Record;
ResultSMC.ResampledParticules = ResampledParticules;
ResultSMC.Likelihood = prod(Liks);
ResultSMC.Liks = Liks;
ResultSMC.LogLik = LogLik;
if not(Parameters.NoPaths)
    ResultSMC.CompletePaths = RebuiltPaths;
end
ResultSMC.ProportionKept = ProportionKept;

try
    ResultSMC.Grad = Grad;
catch
    ResultSMC.Grad = [];
end
try        
    ResultSMC.Hess = Hess;
catch
    ResultSMC.Hess = [];
end
    
    
if strcmp(Parameters.MCMCType, 'Lang')
    if strcmp(Parameters.GMeth, 'one')
        ResultSMC.G = eye(NbParsEst);
        ResultSMC.GParDer = zeros(NbParsEst,NbParsEst);
    elseif strcmp(Parameters.GMeth, 'GMM')
        ind = PickRandComp(Scale((Pars)',Parameters),Parameters.DensityModel,Parameters);
        ResultSMC.G = (diag(Parameters.ScalingStds)*squeeze(Parameters.DensityModel.Sigma(:,:,ind))*diag(Parameters.ScalingStds))^-1;
        ResultSMC.GParDer = zeros(NbParsEst,NbParsEst);
        ResultSMC.CompInd = ind;
    elseif strcmp(Parameters.GMeth, 'cst given')
        ResultSMC.G = Parameters.G;
        ResultSMC.GParDer = zeros(NbParsEst,NbParsEst);
    elseif strcmp(Parameters.GMeth, 'ful')
        ResultSMC.G = G;
        ResultSMC.GParDer = GParDer;
    elseif strcmp(Parameters.GMeth, 'PseudoCst')
        ResultSMC.G = G;
        ResultSMC.GParDer = zeros(NbParsEst,NbParsEst);
    end
else
    ResultSMC.G = [];
    ResultSMC.GParDer = [];
end
if strcmp(Parameters.MCMCType, 'Rand')
    if strcmp(Parameters.GMeth, 'GMM')
        ind = PickRandComp(Scale((Pars)',Parameters),Parameters.DensityModel, Parameters);
        ResultSMC.Cov = diag(Parameters.ScalingStds)*squeeze(Parameters.DensityModel.Sigma(:,:,ind))*diag(Parameters.ScalingStds);
        ResultSMC.CompInd = ind;
    elseif strcmp(Parameters.GMeth, 'cst given')
        ResultSMC.Cov = Parameters.G^-1;
        ResultSMC.CompInd = 1;
    end
end
    
    
    